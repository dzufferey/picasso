package picasso.utils

import org.scalatest._

class AlphaIteratorSuite extends FunSuite {

  test("AlphaIterator: UpperCase") {
    val it = new AlphaIterator
    assert(it.hasNext && it.next == "A")
    assert(it.hasNext && it.next == "B")
    assert(it.hasNext && it.next == "C")
    assert(it.hasNext && it.next == "D")
    assert(it.hasNext && it.next == "E")
    assert(it.hasNext && it.next == "F")
    assert(it.hasNext && it.next == "G")
    assert(it.hasNext && it.next == "H")
    assert(it.hasNext && it.next == "I")
    assert(it.hasNext && it.next == "J")
    assert(it.hasNext && it.next == "K")
    assert(it.hasNext && it.next == "L")
    assert(it.hasNext && it.next == "M")
    assert(it.hasNext && it.next == "N")
    assert(it.hasNext && it.next == "O")
    assert(it.hasNext && it.next == "P")
    assert(it.hasNext && it.next == "Q")
    assert(it.hasNext && it.next == "R")
    assert(it.hasNext && it.next == "S")
    assert(it.hasNext && it.next == "T")
    assert(it.hasNext && it.next == "U")
    assert(it.hasNext && it.next == "V")
    assert(it.hasNext && it.next == "W")
    assert(it.hasNext && it.next == "X")
    assert(it.hasNext && it.next == "Y")
    assert(it.hasNext && it.next == "Z")
    assert(it.hasNext && it.next == "AA")
    assert(it.hasNext && it.next == "AB")
    assert(it.hasNext && it.next == "AC")
    (1 to 26) foreach (x => it.next)
    assert(it.hasNext && it.next == "BD")
    (1 to 26*26) foreach (x => it.next)
    assert(it.hasNext && it.next == "ABE")
    (1 to 26*26) foreach (x => it.next)
    assert(it.hasNext && it.next == "BBF")
  }
  
  test("AlphaIterator: LowerCase") {
    val it = new AlphaIterator(false)
    assert(it.hasNext && it.next == "a")
    assert(it.hasNext && it.next == "b")
    assert(it.hasNext && it.next == "c")
    assert(it.hasNext && it.next == "d")
    assert(it.hasNext && it.next == "e")
    assert(it.hasNext && it.next == "f")
    assert(it.hasNext && it.next == "g")
    assert(it.hasNext && it.next == "h")
    assert(it.hasNext && it.next == "i")
    assert(it.hasNext && it.next == "j")
    assert(it.hasNext && it.next == "k")
    assert(it.hasNext && it.next == "l")
    assert(it.hasNext && it.next == "m")
    assert(it.hasNext && it.next == "n")
    assert(it.hasNext && it.next == "o")
    assert(it.hasNext && it.next == "p")
    assert(it.hasNext && it.next == "q")
    assert(it.hasNext && it.next == "r")
    assert(it.hasNext && it.next == "s")
    assert(it.hasNext && it.next == "t")
    assert(it.hasNext && it.next == "u")
    assert(it.hasNext && it.next == "v")
    assert(it.hasNext && it.next == "w")
    assert(it.hasNext && it.next == "x")
    assert(it.hasNext && it.next == "y")
    assert(it.hasNext && it.next == "z")
    assert(it.hasNext && it.next == "aa")
    assert(it.hasNext && it.next == "ab")
    assert(it.hasNext && it.next == "ac")
    (1 to 26) foreach (x => it.next)
    assert(it.hasNext && it.next == "bd")
    (1 to 26*26) foreach (x => it.next)
    assert(it.hasNext && it.next == "abe")
    (1 to 26*26) foreach (x => it.next)
    assert(it.hasNext && it.next == "bbf")
  }
}
