//example from
//  Deriving Object Typestates in the Presence of Inter-Object References
//  by Mangala Gowri Nanda, Christian Grothoff, and Satish Chandra
//  in OOPSLA 05

/*
class A {
  C f;
  void run() {
    if (f != null) f.run();
  }
  void done() {
    if (f != null) f.dispose();
  }
  void set(C i) {
    if (f != null) f.dispose();
    f = i;
  }
}

class C {
  boolean disposed;
  void run() {
    if (disposed) throw new Error();
  }
  void dispose() {
    if (disposed) throw new Error();
    disposed = true;
  }
}
*/

init
  node (s, safe)

transition "newA(): A"
pre
  node (s, safe)
post
  node (s, safe)
  (a, A) -> (n, Null) [f]
==>
  s -> s
<==


transition "newC(): C"
pre
  node (s, safe)
post
  node (s, safe)
  (c, C) -> (d, not_disposed)
==>
  s -> s
<==

transition "run(A), null"
pre
  node (s, safe)
  (callee, A) -> (n, Null) [f]
post
  node (s, safe)
  (callee, A) -> (n, Null) [f]
==>
  s -> s
  callee -> callee
  n -> n
<==

transition "run(A); not null & not disposed"
pre
  node (s, safe)
  (callee, A) -> (c, C) [f]
  (c, C) -> (d, not_disposed)
post
  node (s, safe)
  (callee, A) -> (c, C) [f]
  (c, C) -> (d, not_disposed)
==>
  s -> s
  callee -> callee
  c -> c
  d -> d
<==

transition "run(A); not null & disposed"
pre
  node (s, safe)
  (callee, A) -> (c, C) [f]
  (c, C) -> (d, disposed)
post
  (callee, A) -> (c, CError) [f]
  (c, CError) -> (d, disposed)
==>
  callee -> callee
  c -> c
  d -> d
<==

transition "done(A); null"
pre
  node (s, safe)
  (callee, A) -> (n, Null) [f]
post
  node (s, safe)
  (callee, A) -> (n, Null) [f]
==>
  s -> s
  callee -> callee
  n -> n
<==

transition "done(A); not null & not disposed"
pre
  node (s, safe)
  (callee, A) -> (c, C) [f]
  (c, C) -> (d, not_disposed)
post
  node (s, safe)
  (callee, A) -> (c, C) [f]
  (c, C) -> (d, disposed)
==>
  s -> s
  callee -> callee
  c -> c
  d -> d
<==

transition "done(A); not null & disposed"
pre
  node (s, safe)
  (callee, A) -> (c, C) [f]
  (c, C) -> (d, disposed)
post
  (callee, A) -> (c, CError) [f]
  (c, CError) -> (d, disposed)
==>
  callee -> callee
  c -> c
  d -> d
<==

transition "set(A, C); null"
pre
  node (s, safe)
  (callee, A) -> (n, Null) [f]
  node (arg0, C)
post
  node (s, safe)
  (callee, A) -> (arg0, C) [f]
  node (n, Null)
==>
  s -> s
  callee -> callee
  n -> n
  arg0 -> arg0
<==

transition "set(A, C); not null & not disposed & not aliased"
pre
  node (s, safe)
  (callee, A) -> (c, C) [f]
  (c, C) -> (d, not_disposed)
  node (arg0, C)
post
  node (s, safe)
  (callee, A) -> (arg0, C) [f]
  (c, C) -> (d, disposed)
==>
  s -> s
  callee -> callee
  c -> c
  arg0 -> arg0
  d -> d
<==

transition "set(A, C); not null & not disposed & aliased"
pre
  node (s, safe)
  (callee, A) -> (arg0, C) [f]
  (arg0, C) -> (d, not_disposed)
post
  node (s, safe)
  (callee, A) -> (arg0, C) [f]
  (arg0, C) -> (d, disposed)
==>
  s -> s
  callee -> callee
  arg0 -> arg0
  d -> d
<==

transition "set(A, C); not null & disposed"
pre
  node (s, safe)
  (callee, A) -> (c, C) [f]
  (c, C) -> (d, disposed)
post
  (callee, A) -> (c, CError) [f]
  (c, CError) -> (d, disposed)
==>
  callee -> callee
  c -> c
  d -> d
<==

