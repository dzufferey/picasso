//example from "Actors in Scala" chapter 9

//  def mapReduce[K, V, K2, V2](
//    input: List[(K, V)],
//    mapping: (K, V) => List[(K2, V2)],
//    reducing: (K2, List[V2]) => List[V2]
//  ): Map[K2, List[V2]] = {
//    case class Intermediate(list: List[(K2, V2)])
//    case class Reduced(key: K2, values: List[V2])
//    val master = self
//    val workers = for ((key, value) <- input) yield
//      actor {
//        master ! Intermediate(mapping(key, value))
//      }
//    var intermediates = List[(K2, V2)]()
//    for (_ <- 1 to input.length)
//      receive {
//        case Intermediate(list) => intermediates :::= list
//      }
//    var dict = Map[K2, List[V2]]() withDefault (k => List())
//    for ((key, value) <- intermediates)
//      dict += (key -> (value :: dict(key)))
//    val reducers = for ((key, values) <- dict) yield
//      actor {
//        master ! Reduced(key, reducing(key, values))
//      }
//    var result = Map[K2, List[V2]]()
//    for (_ <- 1 to dict.size)
//      receive {
//        case Reduced(key, values) =>
//          result += (key -> values)
//      }
//    result
//  }

init
    (m, master) -> (i, input)*

transition "master: make mappers"
pre
    (m, master) -> (i, input)
post
    (m, master) -> (w, mapper)
    (w, mapper) -> (i, input)
==>
    m -> m
    i -> i
<==

transition "master: mappers created"
pre
    node (m, master)
post
    node (m, master1)
==>
    m -> m
<==
no
    (m, master) -> (i, input)
==>
    m -> m

transition "master: mapping done"
pre
    node (m, master1)
post
    node (m, master2)
==>
    m -> m
<==
no
    (m, master1) -> (w, mapper)
    (w, mapper) -> (i, input)
==>
    m -> m

transition "master: reducer"
pre
    (m, master2) -> (k1, key) [inter]
post
    (m, master2) -> (w, reducer)
    (w, reducer) -> (k1, key)
==>
    m -> m
    k1 -> k1
<==

transition "master: reducers created"
pre
    node (m, master2)
post
    node (m, master3)
==>
    m -> m
<==
no
    (m, master2) -> (k, key) [inter]
==>
    m -> m

transition "master: done"
pre
    node (m, master3)
post
    node (m, master4)
==>
    m -> m
<==
no
    (m, master3) -> (w, reducer)
    (w, reducer) -> (k1, key)
==>
    m -> m

transition "mapper"
pre
    (m, _) -> (w, mapper)
    (w, mapper) -> (i, input)
post
    (m, _) -> (k, key)* [inter]
    (k, key)* -> (v, value)**
==>
<==
    m -> m

transition "reducer"
pre
    (m, _) -> (w, reducer)
    (w, reducer) -> (k1, key)
post
    (m, _) -> (k2, key) [result]
    (k2, key) -> (v1, value)
==>
<==
    m -> m
no
    (k1, key) -> (v2, value)
==>
    k1 -> k1
