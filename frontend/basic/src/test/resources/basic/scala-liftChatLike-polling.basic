ErrorLogger(self)
  while true do
    select
      case self ? Exit(_) => ()

Server(self, logger)
  while true do
    select
      case self ? ChatServerMsg(sender) => sender ! ChatServerUpdate()
      case self ? ChatServerAdd(sender) => sender ! ChatServerUpdate()
      case self ? ChatServerPoll(sender) => sender ! ChatServerUpdate()

Client(self, logger, server)
  begin
    val ask := newChannel();
    new AskName(ask, logger);
    ask ! AskQuestion(self);
    select
      case self ? Reply() => ()
      case self ? _ => ();
    server ! ChatServerAdd(self);
    self ! Timer();
    self ! UserInput();
    while true do
      select
        case self ? ChatServerUpdate() => self ! PartialUpdateMsg()
        case self ? PartialUpdateMsg() => ()
        case self ? Timer() =>
          begin
            server ! ChatServerPoll(self);
            self ! Timer()
          end
        case self ? UserInput() =>
          if random() then
            begin
              server ! ChatServerMsg(self);
              self ! UserInput()
            end
          else
            begin
              logger ! Exit(self);
              exit()
            end
  end

AskName(self, logger)
  select
    case self ? AskQuestion(sender) =>
      begin
        sender ! Reply();
        logger ! Exit(self);
        exit()
      end

Env(server, logger)
  while true do new Client(newChannel(), logger, server)

initial
  Env(s,l);
  Server(s,l);
  ErrorLogger(l)
